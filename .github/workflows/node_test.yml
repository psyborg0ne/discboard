# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  notify-start:
    runs-on: ubuntu-latest
    outputs:
      message_id: ${{ steps.discord.outputs.id }}
    steps:
      - name: Set run URL
        id: seturl
        run: |
          echo "url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Send initial Discord message
        id: discord
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bot ${{ secrets.DISCORD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"content\": \"🔨 CI started\n👉 [View run](${{ steps.seturl.outputs.url }})\"}" \
            "https://discord.com/api/v10/channels/${{ secrets.DISCORD_TEXT_DEV_CHANNEL_ID }}/messages")

          echo "id=$(echo $response | jq -r .id)" >> $GITHUB_OUTPUT

  build:
    needs: notify-start
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Prettier check
      run: npm run format

    - name: Run ESLint
      run: npm run lint

    - name: Run build if exists
      run: npm run build --if-present

    - name: Run Jest tests
      run: npm test

    - name: Save build result
      if: always()   # always run even if the job failed
      run: |
        mkdir -p results
        echo "${{ matrix.node-version }} ${{ job.status }}" > results/result.txt
      # upload result for aggregator to read later
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: result-${{ matrix.node-version }}
        path: results/result.txt

  notify:
      runs-on: ubuntu-latest
      needs: build   # waits for ALL matrix builds
      steps:
      - uses: actions/download-artifact@v4
        with:
          path: results

      - name: Aggregate results
        run: |
          summary="✅ Node.js CI Results:\n"
          for file in results/result-*/*; do
            node_version=$(cut -d' ' -f1 "$file")
            status=$(cut -d' ' -f2 "$file")

            if [ "$status" = "success" ]; then
              summary="$summary• Node.js **$node_version** → ✅ Passed\n"
            else
              summary="$summary• Node.js **$node_version** → ❌ Failed\n"
            fi
          done

          echo -e "$summary" > discord_message.txt

      - name: Send final message to Discord
        run: |
          content=$(cat discord_message.txt)
          payload=$(jq -n --arg c "$content" '{content:$c}')

          curl -s -X POST \
            -H "Authorization: Bot ${{ secrets.DISCORD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "https://discord.com/api/v10/channels/${{ secrets.DISCORD_TEXT_DEV_CHANNEL_ID }}/messages"